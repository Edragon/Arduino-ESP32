// Issue 7252 https://github.com/espressif/arduino-esp32/issues/7252
// Code from user, modified to work

#include "esp_err.h"
#include "esp_log.h"
#include "driver/i2s.h"

#define BYTES_TO_WRITE 256
static uint8_t data[BYTES_TO_WRITE] =
   // Sin wave con 256 samples.
 {
   0x80, 0x83, 0x86, 0x89, 0x8C, 0x8F, 0x92, 0x95, 0x98, 0x9B, 0x9E, 0xA1, 0xA4, 0xA7, 0xAA, 0xAD, 0xB0, 0xB3, 0xB6, 0xB9,
   0xBB, 0xBE, 0xC1, 0xC3, 0xC6, 0xC9, 0xCB, 0xCE, 0xD0, 0xD2, 0xD5, 0xD7, 0xD9, 0xDB, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE7,
   0xE9, 0xEB, 0xEC, 0xEE, 0xF0, 0xF1, 0xF2, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFB, 0xFC, 0xFD, 0xFD, 0xFE,
   0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFD, 0xFD, 0xFC, 0xFB, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6,
   0xF5, 0xF4, 0xF2, 0xF1, 0xF0, 0xEE, 0xEC, 0xEB, 0xE9, 0xE7, 0xE6, 0xE4, 0xE2, 0xE0, 0xDE, 0xDB, 0xD9, 0xD7, 0xD5, 0xD2,
   0xD0, 0xCE, 0xCB, 0xC9, 0xC6, 0xC3, 0xC1, 0xBE, 0xBB, 0xB9, 0xB6, 0xB3, 0xB0, 0xAD, 0xAA, 0xA7, 0xA4, 0xA1, 0x9E, 0x9B,
   0x98, 0x95, 0x92, 0x8F, 0x8C, 0x89, 0x86, 0x83, 0x80, 0x7C, 0x79, 0x76, 0x73, 0x70, 0x6D, 0x6A, 0x67, 0x64, 0x61, 0x5E, 0x5B,
   0x58, 0x55, 0x52, 0x4F, 0x4C, 0x49, 0x46, 0x44, 0x41, 0x3E, 0x3C, 0x39, 0x36, 0x34, 0x31, 0x2F, 0x2D, 0x2A, 0x28, 0x26, 0x24,
   0x21, 0x1F, 0x1D, 0x1B, 0x19, 0x18, 0x16, 0x14, 0x13, 0x11, 0xF, 0xE, 0xD, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x4, 0x3,
   0x2, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x3, 0x4, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB,
   0xD, 0xE, 0xF, 0x11, 0x13, 0x14, 0x16, 0x18, 0x19, 0x1B, 0x1D, 0x1F, 0x21, 0x24, 0x26, 0x28, 0x2A, 0x2D, 0x2F, 0x31, 0x34,
   0x36, 0x39, 0x3C, 0x3E, 0x41, 0x44, 0x46, 0x49, 0x4C, 0x4F, 0x52, 0x55, 0x58, 0x5B, 0x5E, 0x61, 0x64, 0x67, 0x6A, 0x6D,
   0x70, 0x73, 0x76, 0x79, 0x7C
 };

void setup() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_DAC_BUILT_IN),
    .sample_rate =  8000,
    .bits_per_sample = (i2s_bits_per_sample_t)16,
    .channel_format = (i2s_channel_fmt_t)I2S_COMM_FORMAT_STAND_I2S,
    .communication_format = I2S_COMM_FORMAT_STAND_MSB,
    .intr_alloc_flags = 0,
    .dma_buf_count = 6,
    .dma_buf_len = 256,
    .use_apll = 1
  };

  if(ESP_OK != i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL)){ //install and start i2s driver
    log_e("err install");
    while(1){vTaskDelay(100);}
  }
  i2s_set_dac_mode(I2S_DAC_CHANNEL_BOTH_EN); // 25 + 26
  //i2s_set_dac_mode(I2S_DAC_CHANNEL_RIGHT_EN); // 25
  //i2s_set_dac_mode(I2S_DAC_CHANNEL_LEFT_EN); // 26
}

void loop() {
  size_t bytes_written;
  i2s_write( I2S_NUM_0, data, BYTES_TO_WRITE, &bytes_written, portMAX_DELAY);
}
